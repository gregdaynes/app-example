---
to: app/src/services/<%= h.changeCase.paramCase(h.inflection.singularize(name)) %>.js
---
<%
  plural = h.changeCase.camelCase(h.inflection.pluralize(name))
  Plural = h.changeCase.pascalCase(h.inflection.pluralize(Name))
  singular = h.changeCase.camelCase(h.inflection.singularize(name))
  Singular = h.changeCase.pascalCase(h.inflection.singularize(Name))
%>const <%= Singular %> = require('../models/<%= h.changeCase.paramCase(h.inflection.singularize(name)) %>')
const { provided, requires } = require('./helpers')

module.exports = {
  create,
  fetch,
  update,
  destroy,
}

async function create ({ idOrganization }) {
  const <%= singular %> = await <%= Singular %>.query().insert({
    idOrganization,
  })

  return <%= Singular %>.query().findById(<%= singular %>.id)
}

async function fetch ({ id, idOrganization, deleted }) {
  requires({ idOrganization })

  const query = <%= Singular %>.query()
    .where({
      idOrganization,
      ...provided({ id }),
    })
    .where(function (builder) {
      if (!deleted) builder.whereNotDeleted()
    })

  return await query
}

async function update ({ id, idOrganization }) {
  requires({
    id,
    idOrganization,
  })

  await <%= Singular %>.query().where({
    id,
    idOrganization,
  }).patch({
    ...provided({ info }),
    ...provided({ title }),
  })

  const <%= singular %> = await <%= Singular %>.query().where({
    id,
    idOrganization,
  })

  return <%= singular %>
}

async function destroy ({ id, idOrganization }) {
  requires({
    id,
    idOrganization,
  })

  return <%= Singular %>.query().deleteById(id).where({
    idOrganization,
  })
}
